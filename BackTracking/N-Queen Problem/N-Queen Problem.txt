class Solution{
    private: 
    bool isSafe(int n,int x,int y,vector<vector<int>> dp){

        int tempx=x,tempy=y-1;
        while(tempy>=0){
            if(dp[tempx][tempy])
                return false;
            tempy--;
        }
        tempx=x;tempy=y;
        while(tempx>=0 and tempy>=0){
            if(dp[tempx][tempy])
                return false;
            tempx--;tempy--;
        }
        tempx=x;tempy=y;
        while(tempx<n and tempy>=0){
            if(dp[tempx][tempy])
                return false;
            tempx++;tempy--;
        }
        return true;
    }
    void solve(int n,vector<vector<int>>&ans,vector<vector<int>> dp,vector<int> tempans,int y){
        if(y==n){
            ans.push_back(tempans);
        return ;
        }
        
        for(int i=0;i<n;i++){
            if(isSafe(n,i,y,dp)){
                dp[i][y]=1;
                tempans.push_back(i+1);
                solve(n,ans,dp,tempans,y+1);
                dp[i][y]=0;
                tempans.pop_back();
            }
        }
    }
public:
    vector<vector<int>> nQueen(int n) {
        // code here
        vector<vector<int>> ans;
        if(n==2 or n==3)
            return ans;
        
        vector<vector<int>> dp(n,vector<int>(n,0));
        vector<int> tempans;
        int y=0;
        solve(n,ans,dp,tempans,y);
        
    }
};

